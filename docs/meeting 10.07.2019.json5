[ // итоги митинга

// 1. абстрактная стуктура вызова функции/метода/рутины
{
  "call": {
    "callee": {
      // unit отсутствует для глобальных рутин.
      // отсутствие unit => статичный вызов.
      "unit": "Optional<UnitReference>",
      // для статичных рутин, определенных внутри unit'ов,
      // информацию о "статичности" можно вытянуть после разбора всего дерева:
      //
      //     RoutineDefinition def = RoutineReference.Resolve();
      //     bool isStaticCall = def.IsStatic;
      //
      "routine": "<routine mangled name>",
    },
    "arguments": [
      "<Expression>",
      ...
    ]
  }
},
// 1.1 побочный вопрос: возможно "callee" использовать как выражение, чтобы использовать функцию/метод/рутину как значение?

// 1.2 структура IR с рамках текущего стиля формирования дерева JSON

{
  "type": "CALL",
  "value": null, // не используется, может отсутствовать
  "children": [
    { // callee
      "type": "CALLEE",
      "value": null, // не используется, может отсутствовать
      "children": [
        { // IDENTIFIER только для рутин, определенных внутри Unit'ов.
          // для глобальных рутин на месте данного JSON объекта находится null.
          "type": "IDENTIFIER",
          "value": "UnitName",
        },
        {
          "type": "IDENTIFIER",
          "value": "RoutineName"
        }
      ]
    },
    { // arguments
      "type": "EXPRESSION_LIST",
      "value": null, // не используется, может отсутствовать
      "children": [
        /* <Expression>, ... */
      ]
    }
  ]
}


// 2. типы от классов не отличать

// 2.1 дженерики (как в C++) резолвятся до генерации IR, и дублируют код.

] // конец митинга